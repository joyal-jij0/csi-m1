// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthCheck {
  id        Int      @id @default(autoincrement())
  status    String   @default("healthy")
  createdAt DateTime @default(now())
}

model User {
  id             String   @id @default(cuid())
  phone          String   @unique 
  refreshToken   String?  @unique
  accessToken    String?  @unique
  pushToken      String?  @unique
  isAdmin        Boolean   @default(false)
  profile        Profile? // Add this to complete the relation
  createdAt      DateTime @default(now())
  votes          Vote[]
}

model Event {
  id          String    @id @default(cuid())
  title       String
  image       String
  description String?   
  venue       String
  performers  String[]  // Array of strings
  type        String
  startsAt    DateTime  
  endsAt      DateTime  
  voting      Boolean   
  createdAt   DateTime  @default(now())
  performances Performance[]
}

model Performance {
  id         String    @id @default(cuid())
  name       String
  startTime  DateTime?
  performers String[]
  image      String?
  eventId    String 
  event      Event @relation(fields: [eventId], references: [id])

  votingStarted  Boolean @default(false)
  votingStartedAt DateTime?
  votingDuration Int?
  votes          Vote[]
}

model Vote {
  id            Int         @id @default(autoincrement())
  performanceId String
  userId        String
  vote          Boolean
  createdAt     DateTime    @default(now())
  performance   Performance @relation(fields: [performanceId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

// KH's code:-

model Profile {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique
  name     String
  college  String
  year     Int
  program  String
  branch   String
}
